library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity scale_clock is
  port (
			clk_50Mhz : in  std_logic;
			rst       : in  std_logic;
			clk_1Hz	: out std_logic;
			clk_2Hz   : out std_logic);
end scale_clock;

architecture Behavioral of scale_clock is

  signal prescaler_1 : unsigned(23 downto 0);
  signal clk_1Hz_i : std_logic;
  
  signal prescaler_2 : unsigned(23 downto 0);
  signal clk_2Hz_i : std_logic;
  
begin

  gen_clk1 : process (clk_50Mhz, rst)
  begin  -- process gen_clk
    if rst = '1' then
      clk_1Hz_i   <= '0';
      prescaler_1   <= (others => '0');
    elsif rising_edge(clk_50Mhz) then 
      if prescaler_1 = X"5F5E10" then     -- 6 250 000 em hex
        prescaler_1   <= (others => '0');
        clk_1Hz_i   <= not clk_1Hz_i;
      else
        prescaler_1 <= prescaler_1 + "1";
      end if;
    end if;
  end process gen_clk1;

	clk_1Hz <= clk_1Hz_i;
	
	-----------------------------------------------------------------

  gen_clk2 : process (clk_50Mhz, rst)
  begin  -- process gen_clk
    if rst = '1' then
      clk_2Hz_i   <= '0';
      prescaler_2   <= (others => '0');
    elsif rising_edge(clk_50Mhz) then 
      if prescaler_2 = X"BEBC20" then     -- 12 500 000 em hex
        prescaler_2   <= (others => '0');
        clk_2Hz_i   <= not clk_2Hz_i;
      else
        prescaler_2 <= prescaler_2 + "1";
      end if;
    end if;
  end process gen_clk2;

	clk_2Hz <= clk_2Hz_i;
	
end Behavioral;